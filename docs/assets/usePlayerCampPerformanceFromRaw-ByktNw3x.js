import{r as C}from"./index-DWfrD1eM.js";import{q as x,t as P}from"./useRawGameData-BVqoB0l1.js";function I(){const{data:u,isLoading:h,error:E}=x(),{data:d,isLoading:R,error:G}=P();return{playerCampPerformance:C.useMemo(()=>{if(!u||u.length===0||!d||d.length===0)return null;const l=e=>e?e.split(",").map(a=>a.trim()).filter(Boolean):[],y=(e,a,t)=>e[a]&&e[a][t]||"Villageois",F=(e,a)=>a&&a.trim()!==""?l(a).some(n=>n.toLowerCase()===e.toLowerCase()):!1,L=(e,a)=>e===a||e==="Traître"&&a==="Loups",m={};d.forEach(e=>{const a=e.Game;if(!a)return;m[a]||(m[a]={});const t=(r,p)=>{r&&r.trim()&&(m[a][r.trim()]=p)},n=e.Loups;n&&l(n).forEach(r=>{m[a][r]="Loups"}),t(e.Traître,"Traître"),t(e["Idiot du village"],"Idiot du Village"),t(e.Cannibale,"Cannibale"),t(e.Espion,"Espion"),t(e["La Bête"],"La Bête"),t(e["Chasseur de primes"],"Chasseur de primes"),t(e.Vaudou,"Vaudou");const i=e.Agent;i&&l(i).forEach(r=>{m[a][r]="Agent"});const f=e.Scientifique;f&&l(f).forEach(r=>{m[a][r]="Scientifique"});const s=e.Amoureux;s&&l(s).forEach(r=>{m[a][r]="Amoureux"})});const o={};u.forEach(e=>{const a=e.Game,t=e["Liste des joueurs"],n=e["Camp victorieux"];if(a&&t&&n){const i=l(t),f=new Set;i.forEach(s=>{const r=s.trim();if(r){const p=y(m,a,r);f.add(p)}}),f.forEach(s=>{o[s]||(o[s]={totalGames:0,wins:0,winRate:0,players:{}}),o[s].totalGames++}),f.forEach(s=>{L(s,n)&&o[s].wins++})}});const c={};u.forEach(e=>{const a=e.Game,t=e["Liste des joueurs"],n=e["Liste des gagnants"];a&&t&&n&&l(t).forEach(f=>{const s=f.trim();if(s){const r=y(m,a,f);o[r].players[s]||(o[r].players[s]={games:0,wins:0,winRate:0}),o[r].players[s].games++;const p=F(s,n);p&&o[r].players[s].wins++,c[s]||(c[s]={totalGames:0,camps:{}}),c[s].camps[r]||(c[s].camps[r]={games:0,wins:0,winRate:0,performance:0}),c[s].totalGames++,c[s].camps[r].games++,p&&c[s].camps[r].wins++}})}),Object.keys(o).forEach(e=>{o[e].totalGames>0&&(o[e].winRate=parseFloat((o[e].wins/o[e].totalGames*100).toFixed(2))),Object.keys(o[e].players).forEach(a=>{const t=o[e].players[a];t.games>0&&(t.winRate=parseFloat((t.wins/t.games*100).toFixed(2)))})}),Object.keys(c).forEach(e=>{Object.keys(c[e].camps).forEach(a=>{const t=c[e].camps[a];t.games>0&&(t.winRate=parseFloat((t.wins/t.games*100).toFixed(2)),o[a]&&o[a].winRate&&(t.performance=parseFloat((t.winRate-o[a].winRate).toFixed(2))))})});const g=5,w=[];return Object.keys(c).forEach(e=>{const a=c[e],t=[];Object.keys(a.camps).forEach(n=>{const i=a.camps[n];i.games>=g&&t.push({camp:n,games:i.games,wins:i.wins,winRate:i.winRate.toFixed(2),campAvgWinRate:o[n].winRate.toFixed(2),performance:i.performance.toFixed(2)})}),t.sort((n,i)=>parseFloat(i.performance)-parseFloat(n.performance)),t.length>0&&w.push({player:e,totalGames:a.totalGames,campPerformance:t})}),w.sort((e,a)=>a.totalGames-e.totalGames),{campAverages:Object.keys(o).map(e=>({camp:e,totalGames:o[e].totalGames,winRate:o[e].winRate.toFixed(2)})),playerPerformance:w,minGamesRequired:g}},[u,d]),isLoading:h||R,error:E||G}}export{I as u};
