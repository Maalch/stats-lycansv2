import{g as B,a as E}from"./datasyncExport-BWxpn9Jg.js";import{D as I}from"./deathTypes-CGUOTngO.js";function x(l,y){if(!l.DeathTiming)return!0;const i=l.DeathTiming.toUpperCase();if(i.startsWith("M")){const m=parseInt(i.substring(1));return y<m}if(i.startsWith("N")||i.startsWith("J")){const m=parseInt(i.substring(1));return y<=m}return!0}function U(l,y){return l.PlayerStats.filter(i=>x(i,y))}function k(l,y,i){const m=l.PlayerStats.find(f=>f.Username===i);return m?m.DeathType===I.VOTED&&m.DeathTiming===`M${y}`:!1}function G(l){const y=[],i=new Map,m=new Map,f=new Map;l.PlayerStats.forEach(n=>{i.set(n.Username,{totalMeetings:0,totalVotes:0,totalSkips:0,totalAbstentions:0}),m.set(n.Username,{totalVotes:0,votesForEnemyCamp:0,votesForOwnCamp:0}),f.set(n.Username,{totalTimesTargeted:0,timesTargetedByEnemyCamp:0,timesTargetedByOwnCamp:0,timesTargetedAsVillager:0,timesTargetedAsWolf:0,timesTargetedAsSpecial:0,eliminationsByVote:0})});const C=Math.max(...l.PlayerStats.flatMap(n=>n.Votes.map(o=>o.Day||0)),0);for(let n=1;n<=C;n++){const o=U(l,n),V=l.PlayerStats.flatMap(s=>s.Votes.filter(T=>T.Day===n).map(T=>({voter:s.Username,vote:T,voterRole:s.MainRoleInitial}))),A=V.filter(s=>s.vote.Target!=="Passé").length,r=V.filter(s=>s.vote.Target==="Passé").length,e=o.length-V.length,t=new Map;V.filter(s=>s.vote.Target!=="Passé").forEach(s=>{const T=t.get(s.vote.Target)||0;t.set(s.vote.Target,T+1)});let a=null,c=0;for(const[s,T]of t.entries())T>c&&(a=s,c=T);let g=null;a&&c>0&&k(l,n,a)&&(g=a),y.push({meetingNumber:n,totalParticipants:o.length,totalVotes:A,totalSkips:r,totalAbstentions:e,participationRate:o.length>0?(A+r)/o.length*100:0,mostTargetedPlayer:a,mostTargetedCount:c,eliminatedPlayer:g}),o.forEach(s=>{const T=i.get(s.Username);T.totalMeetings++;const d=V.find(h=>h.voter===s.Username);if(d)if(d.vote.Target==="Passé")T.totalSkips++;else{T.totalVotes++;const h=m.get(s.Username);h.totalVotes++;const w=B(E(s.MainRoleInitial,s.MainRoleChanges||[]),{regroupWolfSubRoles:!0}),u=l.PlayerStats.find(p=>p.Username===d.vote.Target);if(u){const p=B(E(u.MainRoleInitial,u.MainRoleChanges||[]),{regroupWolfSubRoles:!0});w===p?h.votesForOwnCamp++:h.votesForEnemyCamp++;const M=f.get(d.vote.Target);M.totalTimesTargeted++,w===p?M.timesTargetedByOwnCamp++:M.timesTargetedByEnemyCamp++;const O=E(u.MainRoleInitial,u.MainRoleChanges||[]),F=B(O,{regroupWolfSubRoles:!0});F==="Villageois"?M.timesTargetedAsVillager++:F==="Loup"?M.timesTargetedAsWolf++:M.timesTargetedAsSpecial++,k(l,n,d.vote.Target)&&M.eliminationsByVote++}}else T.totalAbstentions++})}const S=[],v=[],R=[];return l.PlayerStats.forEach(n=>{const o=i.get(n.Username),V=o.totalMeetings>0?o.totalVotes/o.totalMeetings*100:0,A=o.totalMeetings>0?o.totalSkips/o.totalMeetings*100:0,r=o.totalMeetings>0?o.totalAbstentions/o.totalMeetings*100:0,e=V-A*.5-r*.7;S.push({playerName:n.Username,totalMeetings:o.totalMeetings,totalVotes:o.totalVotes,totalSkips:o.totalSkips,totalAbstentions:o.totalAbstentions,votingRate:V,skippingRate:A,abstentionRate:r,aggressivenessScore:e});const t=m.get(n.Username),a=t.totalVotes>0?t.votesForEnemyCamp/t.totalVotes*100:0,c=t.totalVotes>0?t.votesForOwnCamp/t.totalVotes*100:0;v.push({playerName:n.Username,totalMeetings:o.totalMeetings,totalVotes:t.totalVotes,votesForEnemyCamp:t.votesForEnemyCamp,votesForOwnCamp:t.votesForOwnCamp,accuracyRate:a,friendlyFireRate:c});const g=f.get(n.Username),s=g.totalTimesTargeted>0?(g.totalTimesTargeted-g.eliminationsByVote)/g.totalTimesTargeted*100:100;R.push({playerName:n.Username,totalMeetings:o.totalMeetings,totalTimesTargeted:g.totalTimesTargeted,timesTargetedByEnemyCamp:g.timesTargetedByEnemyCamp,timesTargetedByOwnCamp:g.timesTargetedByOwnCamp,timesTargetedAsVillager:g.timesTargetedAsVillager,timesTargetedAsWolf:g.timesTargetedAsWolf,timesTargetedAsSpecial:g.timesTargetedAsSpecial,eliminationsByVote:g.eliminationsByVote,survivalRate:s})}),{gameId:l.Id,totalMeetings:C,meetingAnalytics:y,playerBehaviors:S,playerAccuracies:v,playerTargetStats:R}}function L(l){const y=new Map,i=new Map;let m=0,f=0,C=0,S=0,v=0,R=0,n=0,o=0;l.forEach(r=>{const e=Math.max(...r.PlayerStats.flatMap(t=>t.Votes.map(a=>a.Day)),0);if(e!==0)for(let t=1;t<=e;t++){const a=U(r,t),c=r.PlayerStats.flatMap(p=>p.Votes.filter(M=>M.Day===t).map(M=>({voter:p.Username,vote:M,voterStats:p}))),g=c.filter(p=>p.vote.Target!=="Passé").length,s=c.filter(p=>p.vote.Target==="Passé").length,T=a.length-c.length;m++,f+=g,C+=s,S+=T;const d=a.length>0?g/a.length*100:0,h=a.length>0?s/a.length*100:0,w=a.length>0?T/a.length*100:0;v+=d,R+=h,n+=w,o++;const u=y.get(t)||{meetings:0,totalVotingRates:0,totalSkipRates:0,totalAbstentionRates:0};u.meetings++,u.totalVotingRates+=d,u.totalSkipRates+=h,u.totalAbstentionRates+=w,y.set(t,u),c.filter(p=>p.vote.Target!=="Passé").forEach(({voterStats:p,vote:M})=>{const O=E(p.MainRoleInitial,p.MainRoleChanges||[]),F=B(O,{regroupWolfSubRoles:!0}),P=r.PlayerStats.find(N=>N.Username===M.Target);if(!P)return;const W=E(P.MainRoleInitial,P.MainRoleChanges||[]),D=B(W,{regroupWolfSubRoles:!0}),b=i.get(F)||{totalVotes:0,votesForOppositeCamp:0,votesForOwnCamp:0};b.totalVotes++,F===D?b.votesForOwnCamp++:b.votesForOppositeCamp++,i.set(F,b)})}});const V=Array.from(y.entries()).map(([r,e])=>({meetingDay:r,totalMeetings:e.meetings,averageVotingRate:e.meetings>0?e.totalVotingRates/e.meetings:0,averageSkipRate:e.meetings>0?e.totalSkipRates/e.meetings:0,averageAbstentionRate:e.meetings>0?e.totalAbstentionRates/e.meetings:0})).sort((r,e)=>r.meetingDay-e.meetingDay),A=Array.from(i.entries()).map(([r,e])=>({campName:r,totalVotes:e.totalVotes,votesForOppositeCamp:e.votesForOppositeCamp,votesForOwnCamp:e.votesForOwnCamp,accuracyRate:e.totalVotes>0?e.votesForOppositeCamp/e.totalVotes*100:0,friendlyFireRate:e.totalVotes>0?e.votesForOwnCamp/e.totalVotes*100:0})).sort((r,e)=>e.accuracyRate-r.accuracyRate);return{totalMeetings:m,totalVotes:f,totalSkips:C,totalAbstentions:S,averageVotingRate:o>0?v/o:0,averageSkipRate:o>0?R/o:0,averageAbstentionRate:o>0?n/o:0,meetingDayStats:V,campVotingStats:A}}function Y(l){const y=l.map(G),i=new Map,m=new Map,f=new Map;let C=0,S=0,v=0,R=0,n=0,o=0;y.forEach(e=>{C+=e.totalMeetings,e.meetingAnalytics.forEach(t=>{S+=t.participationRate,v++,R+=t.totalVotes,n+=t.totalSkips,o+=t.totalAbstentions}),e.playerBehaviors.forEach(t=>{const a=i.get(t.playerName)||{totalMeetings:0,totalVotes:0,totalSkips:0,totalAbstentions:0};i.set(t.playerName,{totalMeetings:a.totalMeetings+t.totalMeetings,totalVotes:a.totalVotes+t.totalVotes,totalSkips:a.totalSkips+t.totalSkips,totalAbstentions:a.totalAbstentions+t.totalAbstentions})}),e.playerAccuracies.forEach(t=>{const a=m.get(t.playerName)||{totalMeetings:0,totalVotes:0,votesForEnemyCamp:0,votesForOwnCamp:0};m.set(t.playerName,{totalMeetings:a.totalMeetings+t.totalMeetings,totalVotes:a.totalVotes+t.totalVotes,votesForEnemyCamp:a.votesForEnemyCamp+t.votesForEnemyCamp,votesForOwnCamp:a.votesForOwnCamp+t.votesForOwnCamp})}),e.playerTargetStats.forEach(t=>{const a=f.get(t.playerName)||{totalMeetings:0,totalTimesTargeted:0,timesTargetedByEnemyCamp:0,timesTargetedByOwnCamp:0,timesTargetedAsVillager:0,timesTargetedAsWolf:0,timesTargetedAsSpecial:0,eliminationsByVote:0};f.set(t.playerName,{totalMeetings:a.totalMeetings+t.totalMeetings,totalTimesTargeted:a.totalTimesTargeted+t.totalTimesTargeted,timesTargetedByEnemyCamp:a.timesTargetedByEnemyCamp+t.timesTargetedByEnemyCamp,timesTargetedByOwnCamp:a.timesTargetedByOwnCamp+t.timesTargetedByOwnCamp,timesTargetedAsVillager:a.timesTargetedAsVillager+t.timesTargetedAsVillager,timesTargetedAsWolf:a.timesTargetedAsWolf+t.timesTargetedAsWolf,timesTargetedAsSpecial:a.timesTargetedAsSpecial+t.timesTargetedAsSpecial,eliminationsByVote:a.eliminationsByVote+t.eliminationsByVote})})});const V=Array.from(i.entries()).map(([e,t])=>{const a=t.totalMeetings>0?t.totalVotes/t.totalMeetings*100:0,c=t.totalMeetings>0?t.totalSkips/t.totalMeetings*100:0,g=t.totalMeetings>0?t.totalAbstentions/t.totalMeetings*100:0,s=a-c*.5-g*.7;return{playerName:e,totalMeetings:t.totalMeetings,totalVotes:t.totalVotes,totalSkips:t.totalSkips,totalAbstentions:t.totalAbstentions,votingRate:a,skippingRate:c,abstentionRate:g,aggressivenessScore:s}}),A=Array.from(m.entries()).map(([e,t])=>{const a=t.totalVotes>0?t.votesForEnemyCamp/t.totalVotes*100:0,c=t.totalVotes>0?t.votesForOwnCamp/t.totalVotes*100:0;return{playerName:e,totalMeetings:t.totalMeetings,totalVotes:t.totalVotes,votesForEnemyCamp:t.votesForEnemyCamp,votesForOwnCamp:t.votesForOwnCamp,accuracyRate:a,friendlyFireRate:c}}),r=Array.from(f.entries()).map(([e,t])=>{const a=t.totalTimesTargeted>0?(t.totalTimesTargeted-t.eliminationsByVote)/t.totalTimesTargeted*100:100;return{playerName:e,totalMeetings:t.totalMeetings,totalTimesTargeted:t.totalTimesTargeted,timesTargetedByEnemyCamp:t.timesTargetedByEnemyCamp,timesTargetedByOwnCamp:t.timesTargetedByOwnCamp,timesTargetedAsVillager:t.timesTargetedAsVillager,timesTargetedAsWolf:t.timesTargetedAsWolf,timesTargetedAsSpecial:t.timesTargetedAsSpecial,eliminationsByVote:t.eliminationsByVote,survivalRate:a}});return{playerBehaviorStats:V,playerAccuracyStats:A,playerTargetStats:r,overallMeetingStats:{totalMeetings:C,averageParticipationRate:v>0?S/v:0,totalVotes:R,totalSkips:n,totalAbstentions:o}}}export{L as a,Y as c};
