import{r as D}from"./index-ClHBFAaT.js";import{q as I,t as B}from"./useRawGameData-DKu6upLQ.js";function J(){const{data:g,isLoading:G,error:j}=I(),{data:E,isLoading:F,error:O}=B();return{campWinStats:D.useMemo(()=>{if(!g||g.length===0||!E||E.length===0)return null;const p=t=>t?t.split(",").map(s=>s.trim()).filter(Boolean):[],v=(t,s,e)=>t[s]&&t[s][e]||"Villageois",T=(t,s)=>s&&s.trim()!==""?p(s).some(n=>n.toLowerCase()===t.toLowerCase()):!1,k=(t,s)=>t===s||t==="Traître"&&s==="Loups",i={};E.forEach(t=>{const s=t.Game;if(!s)return;i[s]||(i[s]={});const e=(r,o)=>{r&&r.trim()&&(i[s][r.trim()]=o)},n=t.Loups;n&&p(n).forEach(r=>{i[s][r]="Loups"}),e(t.Traître,"Traître"),e(t["Idiot du village"],"Idiot du Village"),e(t.Cannibale,"Cannibale"),e(t.Espion,"Espion"),e(t["La Bête"],"La Bête"),e(t["Chasseur de primes"],"Chasseur de primes"),e(t.Vaudou,"Vaudou");const f=t.Agent;f&&p(f).forEach(r=>{i[s][r]="Agent"});const u=t.Scientifique;u&&p(u).forEach(r=>{i[s][r]="Scientifique"});const y=t.Amoureux;y&&p(y).forEach(r=>{i[s][r]="Amoureux"})});const h={},d={},a={};let C=0;g.forEach(t=>{const s=t.Game,e=t["Rôles solo"],n=t["Camp victorieux"],f=t["Liste des joueurs"],u=t["Liste des gagnants"];if(e&&e.toString().trim()!==""&&p(e.toString()).forEach(r=>{const o=r.trim();o!==""&&(h[o]||(h[o]=0),h[o]++)}),n&&n.trim()!==""&&(C++,d[n]||(d[n]=0),d[n]++),s&&f&&n&&u){const y=p(f),r=new Set;y.forEach(o=>{const c=o.trim();if(c){const w=v(i,s,c);r.add(w)}}),r.forEach(o=>{a[o]||(a[o]={totalGames:0,wins:0,winRate:0,players:{}}),a[o].totalGames++}),r.forEach(o=>{k(o,n)&&a[o].wins++}),y.forEach(o=>{const c=o.trim();if(c){const w=v(i,s,o);a[w].players[c]||(a[w].players[c]={games:0,wins:0,winRate:0}),a[w].players[c].games++,T(c,u)&&a[w].players[c].wins++}})}}),Object.keys(a).forEach(t=>{a[t].totalGames>0&&(a[t].winRate=parseFloat((a[t].wins/a[t].totalGames*100).toFixed(2))),Object.keys(a[t].players).forEach(s=>{const e=a[t].players[s];e.games>0&&(e.winRate=parseFloat((e.wins/e.games*100).toFixed(2)))})});const L=[];Object.keys(d).forEach(t=>{L.push({camp:t,wins:d[t],winRate:(d[t]/C*100).toFixed(2)})}),L.sort((t,s)=>s.wins-t.wins);const A=Object.keys(a).map(t=>({camp:t,totalGames:a[t].totalGames,winRate:a[t].winRate.toFixed(2)})),b=new Set;Object.keys(a).forEach(t=>{Object.keys(a[t].players).forEach(s=>{b.add(s)})});const W=b.size,R=[];Object.keys(h).forEach(t=>{R.push({soloRole:t,appearances:h[t]})}),R.sort((t,s)=>s.appearances-t.appearances);const l={},m={};g.forEach(t=>{const s=t["Type de victoire"],e=t["Camp victorieux"];s&&s.trim()!==""&&e&&e.trim()!==""&&(l[s]||(l[s]=0),l[s]++,m[s]||(m[s]={}),m[s][e]||(m[s][e]=0),m[s][e]++)});const S=new Set;Object.values(m).forEach(t=>{Object.keys(t).forEach(s=>S.add(s))});const x=Object.keys(l).map(t=>{const s={type:t,count:l[t],percentage:(l[t]/C*100).toFixed(1)},e=m[t]||{};return S.forEach(n=>{const f=e[n]||0,u=l[t]>0?(f/l[t]*100).toFixed(1):"0.0";s[n]=f,s[`${n}_percentage`]=u}),s});x.sort((t,s)=>s.count-t.count);const P=Array.from(S).sort();return{totalGames:C,campStats:L,soloCamps:R,campAverages:A,totalPlayersAnalyzed:W,victoryTypes:x,winningCamps:P}},[g,E]),isLoading:G||F,errorInfo:j||O}}export{J as u};
