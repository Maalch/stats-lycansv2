import{g as b,a as O}from"./datasyncExport-VKVPEJXl.js";import{D as G}from"./deathTypes-CGUOTngO.js";import{g as P,b as E}from"./index-C_TODTpW.js";function H(r,T){if(!r.DeathTiming)return!0;const g=r.DeathTiming.toUpperCase();if(g.startsWith("M")){const y=parseInt(g.substring(1));return T<y}if(g.startsWith("N")||g.startsWith("J")){const y=parseInt(g.substring(1));return T<=y}return!0}function W(r,T){return r.PlayerStats.filter(g=>H(g,T))}function D(r,T,g){const y=r.PlayerStats.find(V=>P(V)===g);return y?y.DeathType===G.VOTED&&y.DeathTiming===`M${T}`:!1}function J(r){const T=[],g=new Map,y=new Map,V=new Map;r.PlayerStats.forEach(m=>{const n=P(m),f=E(m);g.set(n,{totalMeetings:0,totalVotes:0,totalSkips:0,totalAbstentions:0,displayName:f}),y.set(n,{totalVotes:0,votesForEnemyCamp:0,votesForOwnCamp:0}),V.set(n,{totalTimesTargeted:0,timesTargetedByEnemyCamp:0,timesTargetedByOwnCamp:0,timesTargetedAsVillager:0,timesTargetedAsWolf:0,timesTargetedAsSpecial:0,eliminationsByVote:0})});const S=Math.max(...r.PlayerStats.flatMap(m=>m.Votes.map(n=>n.Day||0)),0);for(let m=1;m<=S;m++){const n=W(r,m),f=r.PlayerStats.flatMap(o=>{const s=P(o);return o.Votes.filter(M=>M.Day===m).map(M=>({voterId:s,voterName:E(o),vote:M,voterRole:o.MainRoleInitial}))}),l=f.filter(o=>o.vote.Target!=="Passé").length,p=f.filter(o=>o.vote.Target==="Passé").length,e=n.length-f.length,t=new Map;f.filter(o=>o.vote.Target!=="Passé").forEach(o=>{const s=t.get(o.vote.Target)||0;t.set(o.vote.Target,s+1)});let a=null,i=0;for(const[o,s]of t.entries())s>i&&(a=o,i=s);let A=null;if(a&&i>0){const o=r.PlayerStats.find(s=>s.Username===a);if(o){const s=P(o);D(r,m,s)&&(A=E(o))}}T.push({meetingNumber:m,totalParticipants:n.length,totalVotes:l,totalSkips:p,totalAbstentions:e,participationRate:n.length>0?(l+p)/n.length*100:0,mostTargetedPlayer:a,mostTargetedCount:i,eliminatedPlayer:A}),n.forEach(o=>{const s=P(o),M=g.get(s);M.totalMeetings++,M.displayName=E(o);const w=f.find(h=>h.voterId===s);if(w)if(w.vote.Target==="Passé")M.totalSkips++;else{M.totalVotes++;const h=y.get(s);h.totalVotes++;const F=b(O(o.MainRoleInitial,o.MainRoleChanges||[]),{regroupWolfSubRoles:!0}),c=r.PlayerStats.find(v=>v.Username===w.vote.Target);if(c){const v=P(c),k=b(O(c.MainRoleInitial,c.MainRoleChanges||[]),{regroupWolfSubRoles:!0});F===k?h.votesForOwnCamp++:h.votesForEnemyCamp++;const u=V.get(v);u.totalTimesTargeted++,F===k?u.timesTargetedByOwnCamp++:u.timesTargetedByEnemyCamp++;const B=O(c.MainRoleInitial,c.MainRoleChanges||[]),N=b(B,{regroupWolfSubRoles:!0});N==="Villageois"?u.timesTargetedAsVillager++:N==="Loup"?u.timesTargetedAsWolf++:u.timesTargetedAsSpecial++,D(r,m,v)&&u.eliminationsByVote++}}else M.totalAbstentions++})}const d=[],C=[],R=[];return r.PlayerStats.forEach(m=>{const n=P(m),f=E(m),l=g.get(n),p=l.totalMeetings>0?l.totalVotes/l.totalMeetings*100:0,e=l.totalMeetings>0?l.totalSkips/l.totalMeetings*100:0,t=l.totalMeetings>0?l.totalAbstentions/l.totalMeetings*100:0,a=p-e*.5-t*.7;d.push({playerName:f,totalMeetings:l.totalMeetings,totalVotes:l.totalVotes,totalSkips:l.totalSkips,totalAbstentions:l.totalAbstentions,votingRate:p,skippingRate:e,abstentionRate:t,aggressivenessScore:a});const i=y.get(n),A=i.totalVotes>0?i.votesForEnemyCamp/i.totalVotes*100:0,o=i.totalVotes>0?i.votesForOwnCamp/i.totalVotes*100:0;C.push({playerName:f,totalMeetings:l.totalMeetings,totalVotes:i.totalVotes,votesForEnemyCamp:i.votesForEnemyCamp,votesForOwnCamp:i.votesForOwnCamp,accuracyRate:A,friendlyFireRate:o});const s=V.get(n),M=s.totalTimesTargeted>0?(s.totalTimesTargeted-s.eliminationsByVote)/s.totalTimesTargeted*100:100;R.push({playerName:f,totalMeetings:l.totalMeetings,totalTimesTargeted:s.totalTimesTargeted,timesTargetedByEnemyCamp:s.timesTargetedByEnemyCamp,timesTargetedByOwnCamp:s.timesTargetedByOwnCamp,timesTargetedAsVillager:s.timesTargetedAsVillager,timesTargetedAsWolf:s.timesTargetedAsWolf,timesTargetedAsSpecial:s.timesTargetedAsSpecial,eliminationsByVote:s.eliminationsByVote,survivalRate:M})}),{gameId:r.Id,totalMeetings:S,meetingAnalytics:T,playerBehaviors:d,playerAccuracies:C,playerTargetStats:R}}function $(r){const T=new Map,g=new Map;let y=0,V=0,S=0,d=0,C=0,R=0,m=0,n=0;r.forEach(p=>{const e=Math.max(...p.PlayerStats.flatMap(t=>t.Votes.map(a=>a.Day)),0);if(e!==0)for(let t=1;t<=e;t++){const a=W(p,t),i=p.PlayerStats.flatMap(c=>c.Votes.filter(v=>v.Day===t).map(v=>({voter:c.Username,vote:v,voterStats:c}))),A=i.filter(c=>c.vote.Target!=="Passé").length,o=i.filter(c=>c.vote.Target==="Passé").length,s=a.length-i.length;y++,V+=A,S+=o,d+=s;const M=a.length>0?A/a.length*100:0,w=a.length>0?o/a.length*100:0,h=a.length>0?s/a.length*100:0;C+=M,R+=w,m+=h,n++;const F=T.get(t)||{meetings:0,totalVotingRates:0,totalSkipRates:0,totalAbstentionRates:0};F.meetings++,F.totalVotingRates+=M,F.totalSkipRates+=w,F.totalAbstentionRates+=h,T.set(t,F),i.filter(c=>c.vote.Target!=="Passé").forEach(({voterStats:c,vote:v})=>{const k=O(c.MainRoleInitial,c.MainRoleChanges||[]),u=b(k,{regroupWolfSubRoles:!0}),B=p.PlayerStats.find(U=>U.Username===v.Target);if(!B)return;const N=O(B.MainRoleInitial,B.MainRoleChanges||[]),x=b(N,{regroupWolfSubRoles:!0}),I=g.get(u)||{totalVotes:0,votesForOppositeCamp:0,votesForOwnCamp:0};I.totalVotes++,u===x?I.votesForOwnCamp++:I.votesForOppositeCamp++,g.set(u,I)})}});const f=Array.from(T.entries()).map(([p,e])=>({meetingDay:p,totalMeetings:e.meetings,averageVotingRate:e.meetings>0?e.totalVotingRates/e.meetings:0,averageSkipRate:e.meetings>0?e.totalSkipRates/e.meetings:0,averageAbstentionRate:e.meetings>0?e.totalAbstentionRates/e.meetings:0})).sort((p,e)=>p.meetingDay-e.meetingDay),l=Array.from(g.entries()).map(([p,e])=>({campName:p,totalVotes:e.totalVotes,votesForOppositeCamp:e.votesForOppositeCamp,votesForOwnCamp:e.votesForOwnCamp,accuracyRate:e.totalVotes>0?e.votesForOppositeCamp/e.totalVotes*100:0,friendlyFireRate:e.totalVotes>0?e.votesForOwnCamp/e.totalVotes*100:0})).sort((p,e)=>e.accuracyRate-p.accuracyRate);return{totalMeetings:y,totalVotes:V,totalSkips:S,totalAbstentions:d,averageVotingRate:n>0?C/n:0,averageSkipRate:n>0?R/n:0,averageAbstentionRate:n>0?m/n:0,meetingDayStats:f,campVotingStats:l}}function j(r){const T=r.map(J),g=new Map,y=new Map,V=new Map;let S=0,d=0,C=0,R=0,m=0,n=0;T.forEach(e=>{S+=e.totalMeetings,e.meetingAnalytics.forEach(t=>{d+=t.participationRate,C++,R+=t.totalVotes,m+=t.totalSkips,n+=t.totalAbstentions}),e.playerBehaviors.forEach(t=>{const a=g.get(t.playerName)||{totalMeetings:0,totalVotes:0,totalSkips:0,totalAbstentions:0};g.set(t.playerName,{totalMeetings:a.totalMeetings+t.totalMeetings,totalVotes:a.totalVotes+t.totalVotes,totalSkips:a.totalSkips+t.totalSkips,totalAbstentions:a.totalAbstentions+t.totalAbstentions})}),e.playerAccuracies.forEach(t=>{const a=y.get(t.playerName)||{totalMeetings:0,totalVotes:0,votesForEnemyCamp:0,votesForOwnCamp:0};y.set(t.playerName,{totalMeetings:a.totalMeetings+t.totalMeetings,totalVotes:a.totalVotes+t.totalVotes,votesForEnemyCamp:a.votesForEnemyCamp+t.votesForEnemyCamp,votesForOwnCamp:a.votesForOwnCamp+t.votesForOwnCamp})}),e.playerTargetStats.forEach(t=>{const a=V.get(t.playerName)||{totalMeetings:0,totalTimesTargeted:0,timesTargetedByEnemyCamp:0,timesTargetedByOwnCamp:0,timesTargetedAsVillager:0,timesTargetedAsWolf:0,timesTargetedAsSpecial:0,eliminationsByVote:0};V.set(t.playerName,{totalMeetings:a.totalMeetings+t.totalMeetings,totalTimesTargeted:a.totalTimesTargeted+t.totalTimesTargeted,timesTargetedByEnemyCamp:a.timesTargetedByEnemyCamp+t.timesTargetedByEnemyCamp,timesTargetedByOwnCamp:a.timesTargetedByOwnCamp+t.timesTargetedByOwnCamp,timesTargetedAsVillager:a.timesTargetedAsVillager+t.timesTargetedAsVillager,timesTargetedAsWolf:a.timesTargetedAsWolf+t.timesTargetedAsWolf,timesTargetedAsSpecial:a.timesTargetedAsSpecial+t.timesTargetedAsSpecial,eliminationsByVote:a.eliminationsByVote+t.eliminationsByVote})})});const f=Array.from(g.entries()).map(([e,t])=>{const a=t.totalMeetings>0?t.totalVotes/t.totalMeetings*100:0,i=t.totalMeetings>0?t.totalSkips/t.totalMeetings*100:0,A=t.totalMeetings>0?t.totalAbstentions/t.totalMeetings*100:0,o=a-i*.5-A*.7;return{playerName:e,totalMeetings:t.totalMeetings,totalVotes:t.totalVotes,totalSkips:t.totalSkips,totalAbstentions:t.totalAbstentions,votingRate:a,skippingRate:i,abstentionRate:A,aggressivenessScore:o}}),l=Array.from(y.entries()).map(([e,t])=>{const a=t.totalVotes>0?t.votesForEnemyCamp/t.totalVotes*100:0,i=t.totalVotes>0?t.votesForOwnCamp/t.totalVotes*100:0;return{playerName:e,totalMeetings:t.totalMeetings,totalVotes:t.totalVotes,votesForEnemyCamp:t.votesForEnemyCamp,votesForOwnCamp:t.votesForOwnCamp,accuracyRate:a,friendlyFireRate:i}}),p=Array.from(V.entries()).map(([e,t])=>{const a=t.totalTimesTargeted>0?(t.totalTimesTargeted-t.eliminationsByVote)/t.totalTimesTargeted*100:100;return{playerName:e,totalMeetings:t.totalMeetings,totalTimesTargeted:t.totalTimesTargeted,timesTargetedByEnemyCamp:t.timesTargetedByEnemyCamp,timesTargetedByOwnCamp:t.timesTargetedByOwnCamp,timesTargetedAsVillager:t.timesTargetedAsVillager,timesTargetedAsWolf:t.timesTargetedAsWolf,timesTargetedAsSpecial:t.timesTargetedAsSpecial,eliminationsByVote:t.eliminationsByVote,survivalRate:a}});return{playerBehaviorStats:f,playerAccuracyStats:l,playerTargetStats:p,overallMeetingStats:{totalMeetings:S,averageParticipationRate:C>0?d/C:0,totalVotes:R,totalSkips:m,totalAbstentions:n}}}export{$ as a,j as c};
